/* Generated by Cython 0.29.27 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "CFunction.cpp",
            "CFunction.h"
        ],
        "language": "c++",
        "name": "libcalculus",
        "sources": [
            "libcalculus.pyx"
        ]
    },
    "module_name": "libcalculus"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_27"
#define CYTHON_HEX_VERSION 0x001D1BF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__libcalculus
#define __PYX_HAVE_API__libcalculus
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <complex>
#include <string.h>
#include <string>
#include "CFunction.cpp"
#include "CFunction.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "PyCFunction.pyx",
  "stringsource",
  "libcalculus.pyx",
};
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_11libcalculus_ComplexFunction;
struct __pyx_obj_11libcalculus_Contour;

/* "PyCFunction.pyx":50
 *     CFunction[Dom, Ran] E()
 * 
 * cdef class ComplexFunction:             # <<<<<<<<<<<<<<
 *   cdef CFunction[complex_t[double], complex_t[double]] cfunction
 * 
 */
struct __pyx_obj_11libcalculus_ComplexFunction {
  PyObject_HEAD
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  cfunction;
};


/* "PyCFunction.pyx":253
 *     return F
 * 
 * cdef class Contour:             # <<<<<<<<<<<<<<
 *   cdef CFunction[double, complex_t[double]] cfunction
 * 
 */
struct __pyx_obj_11libcalculus_Contour {
  PyObject_HEAD
  libcalculus::CFunction<double,std::complex<double> >  cfunction;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* ToPy.proto */
#define __pyx_PyComplex_FromComplex(z)\
        PyComplex_FromDoubles((double)__Pyx_CREAL(z),\
                              (double)__Pyx_CIMAG(z))

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.complex' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcalculus' */
static PyTypeObject *__pyx_ptype_11libcalculus_ComplexFunction = 0;
static PyTypeObject *__pyx_ptype_11libcalculus_Contour = 0;
static std::complex<double>  __pyx_convert_complex_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_complex_to_py_double(std::complex<double>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "libcalculus"
extern int __pyx_module_is_main_libcalculus;
int __pyx_module_is_main_libcalculus = 0;

/* Implementation of 'libcalculus' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_E[] = "E";
static const char __pyx_k_F[] = "F";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_Pi[] = "Pi";
static const char __pyx_k_Cos[] = "Cos";
static const char __pyx_k_Cot[] = "Cot";
static const char __pyx_k_Csc[] = "Csc";
static const char __pyx_k_Exp[] = "Exp";
static const char __pyx_k_Sec[] = "Sec";
static const char __pyx_k_Sin[] = "Sin";
static const char __pyx_k_Tan[] = "Tan";
static const char __pyx_k_add[] = "_add";
static const char __pyx_k_div[] = "_div";
static const char __pyx_k_mul[] = "_mul";
static const char __pyx_k_pow[] = "_pow";
static const char __pyx_k_sub[] = "_sub";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_Contour[] = "Contour";
static const char __pyx_k_compose[] = "_compose";
static const char __pyx_k_varname[] = "varname";
static const char __pyx_k_Identity[] = "Identity";
static const char __pyx_k_addconst[] = "_addconst";
static const char __pyx_k_divconst[] = "_divconst";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_mulconst[] = "_mulconst";
static const char __pyx_k_powconst[] = "_powconst";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_subconst[] = "_subconst";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ldivconst[] = "_ldivconst";
static const char __pyx_k_lpowconst[] = "_lpowconst";
static const char __pyx_k_lsubconst[] = "_lsubconst";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_libcalculus[] = "libcalculus";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ComplexFunction[] = "ComplexFunction";
static const char __pyx_k_PyCFunction_pyx[] = "PyCFunction.pyx";
static const char __pyx_k_compose_contour[] = "_compose_contour";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_ComplexFunction;
static PyObject *__pyx_n_s_Contour;
static PyObject *__pyx_n_s_Cos;
static PyObject *__pyx_n_s_Cot;
static PyObject *__pyx_n_s_Csc;
static PyObject *__pyx_n_s_E;
static PyObject *__pyx_n_s_Exp;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_n_s_Identity;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_Pi;
static PyObject *__pyx_kp_s_PyCFunction_pyx;
static PyObject *__pyx_n_s_Sec;
static PyObject *__pyx_n_s_Sin;
static PyObject *__pyx_n_s_Tan;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_addconst;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_compose;
static PyObject *__pyx_n_s_compose_contour;
static PyObject *__pyx_n_s_div;
static PyObject *__pyx_n_s_divconst;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_ldivconst;
static PyObject *__pyx_n_s_libcalculus;
static PyObject *__pyx_n_s_lpowconst;
static PyObject *__pyx_n_s_lsubconst;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mul;
static PyObject *__pyx_n_s_mulconst;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_pow;
static PyObject *__pyx_n_s_powconst;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_sub;
static PyObject *__pyx_n_s_subconst;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_u_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_varname;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_u_z;
static int __pyx_pf_11libcalculus_15ComplexFunction___cinit__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_2__call__(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_z); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_4latex(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, PyObject *__pyx_v_varname); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_6_add(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_8_sub(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_10_mul(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_12_div(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_14_pow(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_16_compose(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_18_compose_contour(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_20_addconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_22_subconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_24_lsubconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_26_mulconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_28_divconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_30_ldivconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_32_powconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_34_lpowconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_36__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_38__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_40__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_42__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_44__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_mod); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_46__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
#endif
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_48Identity(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_50Exp(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_52Sin(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_54Cos(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_56Tan(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_58Sec(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_60Csc(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_62Cot(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_64Pi(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_66E(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_68__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_70__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_11libcalculus_7Contour___cinit__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_2__call__(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_4latex(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, PyObject *__pyx_v_varname); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_6_add(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_8_sub(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_10_mul(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_12_div(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_14_pow(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_16_addconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_18_subconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_20_lsubconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_22_mulconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_24_divconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_26_ldivconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_28_powconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_30_lpowconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_32__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_34__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_36__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_38__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_40__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_mod); /* proto */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_11libcalculus_7Contour_42__matmul__(CYTHON_UNUSED PyObject *__pyx_v_lhs, CYTHON_UNUSED PyObject *__pyx_v_rhs); /* proto */
#endif
static PyObject *__pyx_pf_11libcalculus_7Contour_44Identity(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_46Exp(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_48Sin(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_50Cos(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_52Tan(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_54Sec(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_56Csc(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_58Cot(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_60Pi(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_62E(void); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_11libcalculus_7Contour_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_11libcalculus_ComplexFunction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_11libcalculus_Contour(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__42;
/* Late includes */

/* "PyCFunction.pyx":53
 *   cdef CFunction[complex_t[double], complex_t[double]] cfunction
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_11libcalculus_15ComplexFunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11libcalculus_15ComplexFunction_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction___cinit__(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11libcalculus_15ComplexFunction___cinit__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":56
 *     pass
 * 
 *   def __call__(self, complex_t[double] z):             # <<<<<<<<<<<<<<
 *     return self.cfunction(z)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::complex<double>  __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_z,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 56, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_z = __pyx_convert_complex_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 56, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_2__call__(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_2__call__(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::complex<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "PyCFunction.pyx":57
 * 
 *   def __call__(self, complex_t[double] z):
 *     return self.cfunction(z)             # <<<<<<<<<<<<<<
 * 
 *   def latex(self, str varname = "z"):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->cfunction(__pyx_v_z);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 57, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":56
 *     pass
 * 
 *   def __call__(self, complex_t[double] z):             # <<<<<<<<<<<<<<
 *     return self.cfunction(z)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":59
 *     return self.cfunction(z)
 * 
 *   def latex(self, str varname = "z"):             # <<<<<<<<<<<<<<
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_5latex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_5latex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varname = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("latex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varname,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_n_u_z);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varname);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "latex") < 0)) __PYX_ERR(0, 59, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_varname = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("latex", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction.latex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_varname), (&PyUnicode_Type), 1, "varname", 1))) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_4latex(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), __pyx_v_varname);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_4latex(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("latex", 0);

  /* "PyCFunction.pyx":60
 * 
 *   def latex(self, str varname = "z"):
 *     return self.cfunction.latex(varname.encode()).decode()             # <<<<<<<<<<<<<<
 * 
 *   def _add(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_varname == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 60, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_varname, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->cfunction.latex(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 60, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_t_3, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":59
 *     return self.cfunction(z)
 * 
 *   def latex(self, str varname = "z"):             # <<<<<<<<<<<<<<
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.latex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":62
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 *   def _add(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) + rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_7_add(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_7_add(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 62, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_6_add(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_6_add(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add", 0);

  /* "PyCFunction.pyx":63
 * 
 *   def _add(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) + rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":64
 *   def _add(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) + rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 + __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 64, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":65
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) + rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _sub(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":62
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 *   def _add(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) + rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":67
 *     return F
 * 
 *   def _sub(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) - rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_9_sub(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_9_sub(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 67, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_8_sub(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_8_sub(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_sub", 0);

  /* "PyCFunction.pyx":68
 * 
 *   def _sub(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) - rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":69
 *   def _sub(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) - rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 69, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 - __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 69, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":70
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) - rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _mul(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":67
 *     return F
 * 
 *   def _sub(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) - rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":72
 *     return F
 * 
 *   def _mul(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) * rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_11_mul(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_11_mul(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mul (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_10_mul(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_10_mul(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mul", 0);

  /* "PyCFunction.pyx":73
 * 
 *   def _mul(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) * rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":74
 *   def _mul(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) * rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 74, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 * __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 74, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":75
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) * rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _div(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":72
 *     return F
 * 
 *   def _mul(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) * rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":77
 *     return F
 * 
 *   def _div(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) / rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_13_div(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_13_div(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_div (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_12_div(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_12_div(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_div", 0);

  /* "PyCFunction.pyx":78
 * 
 *   def _div(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) / rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":79
 *   def _div(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) / rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 79, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 / __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 79, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":80
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) / rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _pow(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":77
 *     return F
 * 
 *   def _div(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction) / rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":82
 *     return F
 * 
 *   def _pow(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).pow(rhs.cfunction)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_15_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_15_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_pow (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_14_pow(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_14_pow(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_pow", 0);

  /* "PyCFunction.pyx":83
 * 
 *   def _pow(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).pow(rhs.cfunction)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":84
 *   def _pow(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).pow(rhs.cfunction)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 84, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.pow(__pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":85
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).pow(rhs.cfunction)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _compose(self, ComplexFunction rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":82
 *     return F
 * 
 *   def _pow(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).pow(rhs.cfunction)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":87
 *     return F
 * 
 *   def _compose(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[complex_t[double]](rhs.cfunction)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_17_compose(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_17_compose(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compose (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_ComplexFunction, 1, "rhs", 0))) __PYX_ERR(0, 87, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_16_compose(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_16_compose(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compose", 0);

  /* "PyCFunction.pyx":88
 * 
 *   def _compose(self, ComplexFunction rhs):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[complex_t[double]](rhs.cfunction)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":89
 *   def _compose(self, ComplexFunction rhs):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[complex_t[double]](rhs.cfunction)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 89, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.compose<std::complex<double> >(__pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 89, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":90
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[complex_t[double]](rhs.cfunction)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _compose_contour(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":87
 *     return F
 * 
 *   def _compose(self, ComplexFunction rhs):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[complex_t[double]](rhs.cfunction)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._compose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":92
 *     return F
 * 
 *   def _compose_contour(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[double](rhs.cfunction)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_19_compose_contour(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_19_compose_contour(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compose_contour (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_18_compose_contour(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_18_compose_contour(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_compose_contour", 0);

  /* "PyCFunction.pyx":93
 * 
 *   def _compose_contour(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[double](rhs.cfunction)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":94
 *   def _compose_contour(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[double](rhs.cfunction)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.compose<double>(__pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":95
 *     F = Contour()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[double](rhs.cfunction)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _addconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":92
 *     return F
 * 
 *   def _compose_contour(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).compose[double](rhs.cfunction)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._compose_contour", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":97
 *     return F
 * 
 *   def _addconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).addconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_21_addconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_21_addconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_addconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._addconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_20_addconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_20_addconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_addconst", 0);

  /* "PyCFunction.pyx":98
 * 
 *   def _addconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).addconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":99
 *   def _addconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).addconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 99, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.addconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 99, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":100
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).addconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _subconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":97
 *     return F
 * 
 *   def _addconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).addconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._addconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":102
 *     return F
 * 
 *   def _subconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).subconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_23_subconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_23_subconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_subconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._subconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_22_subconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_22_subconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_subconst", 0);

  /* "PyCFunction.pyx":103
 * 
 *   def _subconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).subconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":104
 *   def _subconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).subconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 104, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.subconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 104, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":105
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).subconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _lsubconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":102
 *     return F
 * 
 *   def _subconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).subconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._subconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":107
 *     return F
 * 
 *   def _lsubconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lsubconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_25_lsubconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_25_lsubconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_lsubconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._lsubconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_24_lsubconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_24_lsubconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_lsubconst", 0);

  /* "PyCFunction.pyx":108
 * 
 *   def _lsubconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lsubconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":109
 *   def _lsubconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lsubconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 109, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.lsubconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 109, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":110
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lsubconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _mulconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":107
 *     return F
 * 
 *   def _lsubconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lsubconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._lsubconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":112
 *     return F
 * 
 *   def _mulconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).mulconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_27_mulconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_27_mulconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mulconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._mulconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_26_mulconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_26_mulconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mulconst", 0);

  /* "PyCFunction.pyx":113
 * 
 *   def _mulconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).mulconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":114
 *   def _mulconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).mulconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 114, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.mulconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 114, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":115
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).mulconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _divconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":112
 *     return F
 * 
 *   def _mulconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).mulconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._mulconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":117
 *     return F
 * 
 *   def _divconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).divconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_29_divconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_29_divconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_divconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._divconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_28_divconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_28_divconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_divconst", 0);

  /* "PyCFunction.pyx":118
 * 
 *   def _divconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).divconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":119
 *   def _divconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).divconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 119, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.divconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 119, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":120
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).divconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _ldivconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":117
 *     return F
 * 
 *   def _divconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).divconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._divconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":122
 *     return F
 * 
 *   def _ldivconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).ldivconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_31_ldivconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_31_ldivconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ldivconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._ldivconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_30_ldivconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_30_ldivconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ldivconst", 0);

  /* "PyCFunction.pyx":123
 * 
 *   def _ldivconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).ldivconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":124
 *   def _ldivconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).ldivconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.ldivconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":125
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).ldivconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _powconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":122
 *     return F
 * 
 *   def _ldivconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).ldivconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._ldivconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":127
 *     return F
 * 
 *   def _powconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).powconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_33_powconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_33_powconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_powconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._powconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_32_powconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_32_powconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_powconst", 0);

  /* "PyCFunction.pyx":128
 * 
 *   def _powconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).powconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":129
 *   def _powconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).powconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.powconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 129, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":130
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).powconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _lpowconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":127
 *     return F
 * 
 *   def _powconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).powconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._powconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":132
 *     return F
 * 
 *   def _lpowconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lpowconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_35_lpowconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_35_lpowconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_lpowconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.ComplexFunction._lpowconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_34_lpowconst(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_34_lpowconst(struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<std::complex<double> ,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_lpowconst", 0);

  /* "PyCFunction.pyx":133
 * 
 *   def _lpowconst(self, complex_t[double] a):
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lpowconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":134
 *   def _lpowconst(self, complex_t[double] a):
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lpowconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<std::complex<double> ,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 134, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.lpowconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 134, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":135
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lpowconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def __add__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":132
 *     return F
 * 
 *   def _lpowconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]](self.cfunction).lpowconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction._lpowconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":137
 *     return F
 * 
 *   def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._addconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_37__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_37__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_36__add__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_36__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "PyCFunction.pyx":138
 * 
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":139
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._addconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_addconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":138
 * 
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":140
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":141
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._add(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_addconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":140
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  }

  /* "PyCFunction.pyx":142
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._add(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":143
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._add(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":142
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._add(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":145
 *       return lhs._add(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __sub__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 145, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":137
 *     return F
 * 
 *   def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._addconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":147
 *       raise NotImplementedError
 * 
 *   def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lsubconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_39__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_39__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_38__sub__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_38__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "PyCFunction.pyx":148
 * 
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":149
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lsubconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_lsubconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":148
 * 
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":150
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":151
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._sub(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_subconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":150
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  }

  /* "PyCFunction.pyx":152
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._sub(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":153
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._sub(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_sub); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":152
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._sub(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":155
 *       return lhs._sub(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __mul__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 155, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":147
 *       raise NotImplementedError
 * 
 *   def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lsubconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":157
 *       raise NotImplementedError
 * 
 *   def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._mulconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_41__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_41__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_40__mul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_40__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "PyCFunction.pyx":158
 * 
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":159
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._mulconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_mulconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":158
 * 
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":160
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":161
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._mul(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_mulconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":160
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  }

  /* "PyCFunction.pyx":162
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._mul(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":163
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._mul(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_mul); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":162
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._mul(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":165
 *       return lhs._mul(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __truediv__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 165, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":157
 *       raise NotImplementedError
 * 
 *   def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._mulconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":167
 *       raise NotImplementedError
 * 
 *   def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._ldivconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_43__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_43__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_42__truediv__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_42__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "PyCFunction.pyx":168
 * 
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":169
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._ldivconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_ldivconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":168
 * 
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":170
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":171
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._div(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_divconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":170
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  }

  /* "PyCFunction.pyx":172
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._div(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":173
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._div(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_div); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":172
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._div(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":175
 *       return lhs._div(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __pow__(lhs, rhs, mod):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 175, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":167
 *       raise NotImplementedError
 * 
 *   def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._ldivconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":177
 *       raise NotImplementedError
 * 
 *   def __pow__(lhs, rhs, mod):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lpowconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_45__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_mod); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_45__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_mod) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_44__pow__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((PyObject *)__pyx_v_mod));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_44__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_mod) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pow__", 0);

  /* "PyCFunction.pyx":178
 * 
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":179
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lpowconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_lpowconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":178
 * 
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":180
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":181
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._pow(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_powconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":180
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 */
  }

  /* "PyCFunction.pyx":182
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._pow(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":183
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._pow(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_pow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":182
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._pow(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":185
 *       return lhs._pow(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __matmul__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 185, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":177
 *       raise NotImplementedError
 * 
 *   def __pow__(lhs, rhs, mod):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, ComplexFunction):
 *       return rhs._lpowconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":187
 *       raise NotImplementedError
 * 
 *   def __matmul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._compose(rhs)
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_47__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_47__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_46__matmul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_46__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "PyCFunction.pyx":188
 * 
 *   def __matmul__(lhs, rhs):
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._compose(rhs)
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":189
 *   def __matmul__(lhs, rhs):
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._compose(rhs)             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):
 *       return lhs._compose_contour(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_compose); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":188
 * 
 *   def __matmul__(lhs, rhs):
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):             # <<<<<<<<<<<<<<
 *       return lhs._compose(rhs)
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":190
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._compose(rhs)
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._compose_contour(rhs)
 *     else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_ComplexFunction); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":191
 *       return lhs._compose(rhs)
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):
 *       return lhs._compose_contour(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_compose_contour); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":190
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._compose(rhs)
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._compose_contour(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":193
 *       return lhs._compose_contour(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 193, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":187
 *       raise NotImplementedError
 * 
 *   def __matmul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, ComplexFunction) and isinstance(rhs, ComplexFunction):
 *       return lhs._compose(rhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "PyCFunction.pyx":196
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return ComplexFunction()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_49Identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_49Identity = {"Identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_49Identity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_49Identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Identity (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Identity", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Identity", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_48Identity();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_48Identity(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Identity", 0);

  /* "PyCFunction.pyx":197
 *   @staticmethod
 *   def Identity():
 *     return ComplexFunction()             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":196
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return ComplexFunction()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":200
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_51Exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_51Exp = {"Exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_51Exp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_51Exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Exp (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Exp", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Exp", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_50Exp();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_50Exp(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Exp", 0);

  /* "PyCFunction.pyx":201
 *   @staticmethod
 *   def Exp():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":202
 *   def Exp():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Exp();

  /* "PyCFunction.pyx":203
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":200
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":206
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_53Sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_53Sin = {"Sin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_53Sin, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_53Sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Sin (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Sin", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Sin", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_52Sin();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_52Sin(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Sin", 0);

  /* "PyCFunction.pyx":207
 *   @staticmethod
 *   def Sin():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":208
 *   def Sin():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Sin();

  /* "PyCFunction.pyx":209
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":206
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":212
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_55Cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_55Cos = {"Cos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_55Cos, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_55Cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cos (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Cos", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Cos", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_54Cos();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_54Cos(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cos", 0);

  /* "PyCFunction.pyx":213
 *   @staticmethod
 *   def Cos():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":214
 *   def Cos():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Cos();

  /* "PyCFunction.pyx":215
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":212
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":218
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_57Tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_57Tan = {"Tan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_57Tan, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_57Tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Tan (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Tan", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Tan", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_56Tan();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_56Tan(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Tan", 0);

  /* "PyCFunction.pyx":219
 *   @staticmethod
 *   def Tan():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":220
 *   def Tan():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Tan();

  /* "PyCFunction.pyx":221
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":218
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":224
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_59Sec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_59Sec = {"Sec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_59Sec, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_59Sec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Sec (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Sec", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Sec", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_58Sec();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_58Sec(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Sec", 0);

  /* "PyCFunction.pyx":225
 *   @staticmethod
 *   def Sec():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":226
 *   def Sec():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Sec();

  /* "PyCFunction.pyx":227
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":224
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Sec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":230
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_61Csc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_61Csc = {"Csc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_61Csc, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_61Csc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Csc (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Csc", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Csc", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_60Csc();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_60Csc(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Csc", 0);

  /* "PyCFunction.pyx":231
 *   @staticmethod
 *   def Csc():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":232
 *   def Csc():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Csc();

  /* "PyCFunction.pyx":233
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":230
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Csc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":236
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_63Cot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_63Cot = {"Cot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_63Cot, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_63Cot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cot (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Cot", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Cot", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_62Cot();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_62Cot(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cot", 0);

  /* "PyCFunction.pyx":237
 *   @staticmethod
 *   def Cot():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":238
 *   def Cot():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Cot();

  /* "PyCFunction.pyx":239
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":236
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Cot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":242
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_65Pi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_65Pi = {"Pi", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_65Pi, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_65Pi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pi (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Pi", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Pi", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_64Pi();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_64Pi(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pi", 0);

  /* "PyCFunction.pyx":243
 *   @staticmethod
 *   def Pi():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":244
 *   def Pi():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::Pi();

  /* "PyCFunction.pyx":245
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":242
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.Pi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":248
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_67E(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_15ComplexFunction_67E = {"E", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_67E, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_67E(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("E (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("E", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "E", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_66E();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_66E(void) {
  struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("E", 0);

  /* "PyCFunction.pyx":249
 *   @staticmethod
 *   def E():
 *     F = ComplexFunction()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":250
 *   def E():
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<std::complex<double> ,std::complex<double> > ::E();

  /* "PyCFunction.pyx":251
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 *     return F             # <<<<<<<<<<<<<<
 * 
 * cdef class Contour:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":248
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.E", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_69__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_69__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_68__reduce_cython__(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_68__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_71__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11libcalculus_15ComplexFunction_71__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_15ComplexFunction_70__setstate_cython__(((struct __pyx_obj_11libcalculus_ComplexFunction *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_15ComplexFunction_70__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_ComplexFunction *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.ComplexFunction.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":256
 *   cdef CFunction[double, complex_t[double]] cfunction
 * 
 *   def __cinit__(self):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_11libcalculus_7Contour_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_11libcalculus_7Contour_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_11libcalculus_7Contour___cinit__(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_11libcalculus_7Contour___cinit__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":259
 *     pass
 * 
 *   def __call__(self, double t):             # <<<<<<<<<<<<<<
 *     return self.cfunction(t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_t;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_t,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__call__") < 0)) __PYX_ERR(0, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__call__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_2__call__(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_2__call__(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::complex<double>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "PyCFunction.pyx":260
 * 
 *   def __call__(self, double t):
 *     return self.cfunction(t)             # <<<<<<<<<<<<<<
 * 
 *   def latex(self, str varname = "t"):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->cfunction(__pyx_v_t);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 260, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_complex_to_py_double(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":259
 *     pass
 * 
 *   def __call__(self, double t):             # <<<<<<<<<<<<<<
 *     return self.cfunction(t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libcalculus.Contour.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":262
 *     return self.cfunction(t)
 * 
 *   def latex(self, str varname = "t"):             # <<<<<<<<<<<<<<
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_5latex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_5latex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_varname = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("latex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_varname,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_n_u_t);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_varname);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "latex") < 0)) __PYX_ERR(0, 262, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_varname = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("latex", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 262, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour.latex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_varname), (&PyUnicode_Type), 1, "varname", 1))) __PYX_ERR(0, 262, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_4latex(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), __pyx_v_varname);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_4latex(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, PyObject *__pyx_v_varname) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  std::string __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("latex", 0);

  /* "PyCFunction.pyx":263
 * 
 *   def latex(self, str varname = "t"):
 *     return self.cfunction.latex(varname.encode()).decode()             # <<<<<<<<<<<<<<
 * 
 *   def _add(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(__pyx_v_varname == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 263, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsEncodedString(__pyx_v_varname, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->cfunction.latex(__pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 263, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_decode_cpp_string(__pyx_t_3, 0, PY_SSIZE_T_MAX, NULL, NULL, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":262
 *     return self.cfunction(t)
 * 
 *   def latex(self, str varname = "t"):             # <<<<<<<<<<<<<<
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.latex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":265
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 *   def _add(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) + rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_7_add(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_7_add(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_6_add(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_6_add(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add", 0);

  /* "PyCFunction.pyx":266
 * 
 *   def _add(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) + rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":267
 *   def _add(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) + rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 267, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 + __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 267, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":268
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) + rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _sub(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":265
 *     return self.cfunction.latex(varname.encode()).decode()
 * 
 *   def _add(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) + rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":270
 *     return F
 * 
 *   def _sub(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) - rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_9_sub(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_9_sub(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_sub (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_8_sub(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_8_sub(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_sub", 0);

  /* "PyCFunction.pyx":271
 * 
 *   def _sub(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) - rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":272
 *   def _sub(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) - rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 - __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":273
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) - rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _mul(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":270
 *     return F
 * 
 *   def _sub(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) - rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":275
 *     return F
 * 
 *   def _mul(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) * rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_11_mul(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_11_mul(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mul (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 275, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_10_mul(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_10_mul(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mul", 0);

  /* "PyCFunction.pyx":276
 * 
 *   def _mul(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) * rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":277
 *   def _mul(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) * rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 277, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 * __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 277, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":278
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) * rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _div(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":275
 *     return F
 * 
 *   def _mul(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) * rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":280
 *     return F
 * 
 *   def _div(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) / rhs.cfunction
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_13_div(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_13_div(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_div (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_12_div(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_12_div(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_div", 0);

  /* "PyCFunction.pyx":281
 * 
 *   def _div(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) / rhs.cfunction
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":282
 *   def _div(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) / rhs.cfunction             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 282, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = (__pyx_t_2 / __pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 282, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":283
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) / rhs.cfunction
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _pow(self, Contour rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":280
 *     return F
 * 
 *   def _div(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction) / rhs.cfunction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":285
 *     return F
 * 
 *   def _pow(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).pow(rhs.cfunction)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_15_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_15_pow(PyObject *__pyx_v_self, PyObject *__pyx_v_rhs) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_pow (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rhs), __pyx_ptype_11libcalculus_Contour, 1, "rhs", 0))) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_r = __pyx_pf_11libcalculus_7Contour_14_pow(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_rhs));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_14_pow(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, struct __pyx_obj_11libcalculus_Contour *__pyx_v_rhs) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_pow", 0);

  /* "PyCFunction.pyx":286
 * 
 *   def _pow(self, Contour rhs):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).pow(rhs.cfunction)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":287
 *   def _pow(self, Contour rhs):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).pow(rhs.cfunction)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 287, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.pow(__pyx_v_rhs->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 287, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":288
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).pow(rhs.cfunction)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _addconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":285
 *     return F
 * 
 *   def _pow(self, Contour rhs):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).pow(rhs.cfunction)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":290
 *     return F
 * 
 *   def _addconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).addconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_17_addconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_17_addconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_addconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._addconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_16_addconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_16_addconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_addconst", 0);

  /* "PyCFunction.pyx":291
 * 
 *   def _addconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).addconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":292
 *   def _addconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).addconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 292, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.addconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 292, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":293
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).addconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _subconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":290
 *     return F
 * 
 *   def _addconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).addconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._addconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":295
 *     return F
 * 
 *   def _subconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).subconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_19_subconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_19_subconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_subconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._subconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_18_subconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_18_subconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_subconst", 0);

  /* "PyCFunction.pyx":296
 * 
 *   def _subconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).subconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":297
 *   def _subconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).subconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.subconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":298
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).subconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _lsubconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":295
 *     return F
 * 
 *   def _subconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).subconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._subconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":300
 *     return F
 * 
 *   def _lsubconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lsubconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_21_lsubconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_21_lsubconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_lsubconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._lsubconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_20_lsubconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_20_lsubconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_lsubconst", 0);

  /* "PyCFunction.pyx":301
 * 
 *   def _lsubconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lsubconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":302
 *   def _lsubconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lsubconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 302, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.lsubconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 302, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":303
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lsubconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _mulconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":300
 *     return F
 * 
 *   def _lsubconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lsubconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._lsubconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":305
 *     return F
 * 
 *   def _mulconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).mulconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_23_mulconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_23_mulconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_mulconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._mulconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_22_mulconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_22_mulconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mulconst", 0);

  /* "PyCFunction.pyx":306
 * 
 *   def _mulconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).mulconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":307
 *   def _mulconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).mulconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.mulconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":308
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).mulconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _divconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":305
 *     return F
 * 
 *   def _mulconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).mulconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._mulconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":310
 *     return F
 * 
 *   def _divconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).divconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_25_divconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_25_divconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_divconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._divconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_24_divconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_24_divconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_divconst", 0);

  /* "PyCFunction.pyx":311
 * 
 *   def _divconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).divconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":312
 *   def _divconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).divconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 312, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.divconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 312, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":313
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).divconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _ldivconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":310
 *     return F
 * 
 *   def _divconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).divconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._divconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":315
 *     return F
 * 
 *   def _ldivconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).ldivconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_27_ldivconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_27_ldivconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_ldivconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._ldivconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_26_ldivconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_26_ldivconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ldivconst", 0);

  /* "PyCFunction.pyx":316
 * 
 *   def _ldivconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).ldivconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":317
 *   def _ldivconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).ldivconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.ldivconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 317, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":318
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).ldivconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _powconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":315
 *     return F
 * 
 *   def _ldivconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).ldivconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._ldivconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":320
 *     return F
 * 
 *   def _powconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).powconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_29_powconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_29_powconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_powconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._powconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_28_powconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_28_powconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_powconst", 0);

  /* "PyCFunction.pyx":321
 * 
 *   def _powconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).powconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":322
 *   def _powconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).powconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 322, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.powconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 322, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":323
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).powconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def _lpowconst(self, complex_t[double] a):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":320
 *     return F
 * 
 *   def _powconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).powconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._powconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":325
 *     return F
 * 
 *   def _lpowconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lpowconst(a)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_31_lpowconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_31_lpowconst(PyObject *__pyx_v_self, PyObject *__pyx_arg_a) {
  std::complex<double>  __pyx_v_a;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_lpowconst (wrapper)", 0);
  assert(__pyx_arg_a); {
    __pyx_v_a = __pyx_convert_complex_from_py_double(__pyx_arg_a); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 325, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libcalculus.Contour._lpowconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_30_lpowconst(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((std::complex<double> )__pyx_v_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_30_lpowconst(struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, std::complex<double>  __pyx_v_a) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_2;
  libcalculus::CFunction<double,std::complex<double> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_lpowconst", 0);

  /* "PyCFunction.pyx":326
 * 
 *   def _lpowconst(self, complex_t[double] a):
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lpowconst(a)
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":327
 *   def _lpowconst(self, complex_t[double] a):
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lpowconst(a)             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  try {
    __pyx_t_2 = libcalculus::CFunction<double,std::complex<double> > (__pyx_v_self->cfunction);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 327, __pyx_L1_error)
  }
  try {
    __pyx_t_3 = __pyx_t_2.lpowconst(__pyx_v_a);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 327, __pyx_L1_error)
  }
  __pyx_v_F->cfunction = __pyx_t_3;

  /* "PyCFunction.pyx":328
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lpowconst(a)
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   def __add__(lhs, rhs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":325
 *     return F
 * 
 *   def _lpowconst(self, complex_t[double] a):             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]](self.cfunction).lpowconst(a)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour._lpowconst", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":330
 *     return F
 * 
 *   def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._addconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_33__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_33__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_32__add__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_32__add__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "PyCFunction.pyx":331
 * 
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":332
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._addconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_addconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":331
 * 
 *   def __add__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":333
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":334
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._add(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_addconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":333
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._addconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":335
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._add(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":336
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._add(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_add); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":335
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._addconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._add(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":338
 *       return lhs._add(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __sub__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 338, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":330
 *     return F
 * 
 *   def __add__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._addconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.Contour.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":340
 *       raise NotImplementedError
 * 
 *   def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lsubconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_35__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_35__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_34__sub__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_34__sub__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "PyCFunction.pyx":341
 * 
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":342
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lsubconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_lsubconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":341
 * 
 *   def __sub__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":343
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":344
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._sub(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_subconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":343
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lsubconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":345
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._sub(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":346
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._sub(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_sub); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":345
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._subconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._sub(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":348
 *       return lhs._sub(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __mul__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 348, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":340
 *       raise NotImplementedError
 * 
 *   def __sub__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lsubconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.Contour.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":350
 *       raise NotImplementedError
 * 
 *   def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._mulconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_37__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_37__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_36__mul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_36__mul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "PyCFunction.pyx":351
 * 
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":352
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._mulconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_mulconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":351
 * 
 *   def __mul__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":353
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":354
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._mul(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_mulconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":353
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._mulconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":355
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._mul(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":356
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._mul(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_mul); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":355
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._mulconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._mul(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":358
 *       return lhs._mul(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __truediv__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 358, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":350
 *       raise NotImplementedError
 * 
 *   def __mul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._mulconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.Contour.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":360
 *       raise NotImplementedError
 * 
 *   def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._ldivconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_39__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_39__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__truediv__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_38__truediv__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_38__truediv__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__truediv__", 0);

  /* "PyCFunction.pyx":361
 * 
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":362
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._ldivconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_ldivconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":361
 * 
 *   def __truediv__(lhs, rhs):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":363
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":364
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._div(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_divconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":363
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._ldivconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":365
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._div(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":366
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._div(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_div); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":365
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._divconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._div(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":368
 *       return lhs._div(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __pow__(lhs, rhs, mod):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 368, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":360
 *       raise NotImplementedError
 * 
 *   def __truediv__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._ldivconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.Contour.__truediv__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":370
 *       raise NotImplementedError
 * 
 *   def __pow__(lhs, rhs, mod):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lpowconst(lhs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_41__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_mod); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_41__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, PyObject *__pyx_v_mod) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pow__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_40__pow__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs), ((PyObject *)__pyx_v_mod));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_40__pow__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs, CYTHON_UNUSED PyObject *__pyx_v_mod) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pow__", 0);

  /* "PyCFunction.pyx":371
 * 
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyFloat_Check(__pyx_v_lhs); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = PyComplex_Check(__pyx_v_lhs); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L6_bool_binop_done:;
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_2 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":372
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lpowconst(lhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_rhs, __pyx_n_s_lpowconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_lhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_lhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 372, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":371
 * 
 *   def __pow__(lhs, rhs, mod):
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 */
  }

  /* "PyCFunction.pyx":373
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_2 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_3 = PyFloat_Check(__pyx_v_rhs); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_4 = __pyx_t_2;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_2 = PyComplex_Check(__pyx_v_rhs); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L11_bool_binop_done:;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_1) {

    /* "PyCFunction.pyx":374
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)             # <<<<<<<<<<<<<<
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._pow(rhs)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_powconst); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":373
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lpowconst(lhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):             # <<<<<<<<<<<<<<
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 */
  }

  /* "PyCFunction.pyx":375
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._pow(rhs)
 *     else:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_lhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_rhs, __pyx_ptype_11libcalculus_Contour); 
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L14_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "PyCFunction.pyx":376
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):
 *       return lhs._pow(rhs)             # <<<<<<<<<<<<<<
 *     else:
 *       raise NotImplementedError
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lhs, __pyx_n_s_pow); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_v_rhs) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_rhs);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "PyCFunction.pyx":375
 *     elif isinstance(lhs, Contour) and isinstance(rhs, (int, float, complex)):
 *       return lhs._powconst(rhs)
 *     elif isinstance(lhs, Contour) and isinstance(rhs, Contour):             # <<<<<<<<<<<<<<
 *       return lhs._pow(rhs)
 *     else:
 */
  }

  /* "PyCFunction.pyx":378
 *       return lhs._pow(rhs)
 *     else:
 *       raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   def __matmul__(lhs, rhs):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 378, __pyx_L1_error)
  }

  /* "PyCFunction.pyx":370
 *       raise NotImplementedError
 * 
 *   def __pow__(lhs, rhs, mod):             # <<<<<<<<<<<<<<
 *     if isinstance(lhs, (int, float, complex)) and isinstance(rhs, Contour):
 *       return rhs._lpowconst(lhs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libcalculus.Contour.__pow__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":380
 *       raise NotImplementedError
 * 
 *   def __matmul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

/* Python wrapper */
#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pw_11libcalculus_7Contour_43__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_43__matmul__(PyObject *__pyx_v_lhs, PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__matmul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_42__matmul__(((PyObject *)__pyx_v_lhs), ((PyObject *)__pyx_v_rhs));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

#if PY_VERSION_HEX >= 0x03050000
static PyObject *__pyx_pf_11libcalculus_7Contour_42__matmul__(CYTHON_UNUSED PyObject *__pyx_v_lhs, CYTHON_UNUSED PyObject *__pyx_v_rhs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__matmul__", 0);

  /* "PyCFunction.pyx":381
 * 
 *   def __matmul__(lhs, rhs):
 *     raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 381, __pyx_L1_error)

  /* "PyCFunction.pyx":380
 *       raise NotImplementedError
 * 
 *   def __matmul__(lhs, rhs):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("libcalculus.Contour.__matmul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_VERSION_HEX >= 0x03050000)*/

/* "PyCFunction.pyx":384
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return Contour()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_45Identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_45Identity = {"Identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_45Identity, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_45Identity(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Identity (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Identity", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Identity", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_44Identity();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_44Identity(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Identity", 0);

  /* "PyCFunction.pyx":385
 *   @staticmethod
 *   def Identity():
 *     return Contour()             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PyCFunction.pyx":384
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return Contour()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Identity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":388
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_47Exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_47Exp = {"Exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_47Exp, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_47Exp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Exp (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Exp", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Exp", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_46Exp();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_46Exp(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Exp", 0);

  /* "PyCFunction.pyx":389
 *   @staticmethod
 *   def Exp():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":390
 *   def Exp():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Exp();

  /* "PyCFunction.pyx":391
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":388
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":394
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_49Sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_49Sin = {"Sin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_49Sin, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_49Sin(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Sin (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Sin", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Sin", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_48Sin();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_48Sin(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Sin", 0);

  /* "PyCFunction.pyx":395
 *   @staticmethod
 *   def Sin():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":396
 *   def Sin():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Sin();

  /* "PyCFunction.pyx":397
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":394
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Sin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":400
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_51Cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_51Cos = {"Cos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_51Cos, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_51Cos(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cos (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Cos", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Cos", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_50Cos();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_50Cos(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cos", 0);

  /* "PyCFunction.pyx":401
 *   @staticmethod
 *   def Cos():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":402
 *   def Cos():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Cos();

  /* "PyCFunction.pyx":403
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":400
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Cos", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":406
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_53Tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_53Tan = {"Tan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_53Tan, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_53Tan(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Tan (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Tan", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Tan", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_52Tan();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_52Tan(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Tan", 0);

  /* "PyCFunction.pyx":407
 *   @staticmethod
 *   def Tan():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":408
 *   def Tan():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Tan();

  /* "PyCFunction.pyx":409
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":406
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Tan", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":412
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_55Sec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_55Sec = {"Sec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_55Sec, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_55Sec(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Sec (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Sec", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Sec", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_54Sec();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_54Sec(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Sec", 0);

  /* "PyCFunction.pyx":413
 *   @staticmethod
 *   def Sec():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":414
 *   def Sec():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Sec();

  /* "PyCFunction.pyx":415
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":412
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Sec", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":418
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_57Csc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_57Csc = {"Csc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_57Csc, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_57Csc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Csc (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Csc", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Csc", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_56Csc();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_56Csc(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Csc", 0);

  /* "PyCFunction.pyx":419
 *   @staticmethod
 *   def Csc():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":420
 *   def Csc():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Csc();

  /* "PyCFunction.pyx":421
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":418
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Csc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":424
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_59Cot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_59Cot = {"Cot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_59Cot, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_59Cot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Cot (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Cot", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Cot", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_58Cot();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_58Cot(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Cot", 0);

  /* "PyCFunction.pyx":425
 *   @staticmethod
 *   def Cot():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":426
 *   def Cot():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Cot();

  /* "PyCFunction.pyx":427
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":424
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Cot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":430
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_61Pi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_61Pi = {"Pi", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_61Pi, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_61Pi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pi (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("Pi", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "Pi", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_60Pi();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_60Pi(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pi", 0);

  /* "PyCFunction.pyx":431
 *   @staticmethod
 *   def Pi():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":432
 *   def Pi():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()             # <<<<<<<<<<<<<<
 *     return F
 * 
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::Pi();

  /* "PyCFunction.pyx":433
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 *     return F             # <<<<<<<<<<<<<<
 * 
 *   @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":430
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.Pi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PyCFunction.pyx":436
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_63E(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_11libcalculus_7Contour_63E = {"E", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_63E, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_11libcalculus_7Contour_63E(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("E (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("E", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "E", 0))) return NULL;
  __pyx_r = __pyx_pf_11libcalculus_7Contour_62E();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_62E(void) {
  struct __pyx_obj_11libcalculus_Contour *__pyx_v_F = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("E", 0);

  /* "PyCFunction.pyx":437
 *   @staticmethod
 *   def E():
 *     F = Contour()             # <<<<<<<<<<<<<<
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 *     return F
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_11libcalculus_Contour)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_F = ((struct __pyx_obj_11libcalculus_Contour *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PyCFunction.pyx":438
 *   def E():
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()             # <<<<<<<<<<<<<<
 *     return F
 */
  __pyx_v_F->cfunction = libcalculus::CFunction<double,std::complex<double> > ::E();

  /* "PyCFunction.pyx":439
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 *     return F             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_F));
  __pyx_r = ((PyObject *)__pyx_v_F);
  goto __pyx_L0;

  /* "PyCFunction.pyx":436
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.E", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_F);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_64__reduce_cython__(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_11libcalculus_7Contour_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_11libcalculus_7Contour_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_11libcalculus_7Contour_66__setstate_cython__(((struct __pyx_obj_11libcalculus_Contour *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_11libcalculus_7Contour_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_11libcalculus_Contour *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libcalculus.Contour.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "complex.from_py":220
 * 
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)
 */

static std::complex<double>  __pyx_convert_complex_from_py_double(PyObject *__pyx_v_o) {
  __pyx_t_double_complex __pyx_v_z;
  std::complex<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  std::complex<double>  __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_complex_from_py_double", 0);

  /* "complex.from_py":221
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:
 *     cdef double complex z = o             # <<<<<<<<<<<<<<
 *     return std_complex[X](<X>z.real, <X>z.imag)
 * 
 */
  __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_v_o); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 221, __pyx_L1_error)
  __pyx_v_z = __pyx_t_1;

  /* "complex.from_py":222
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::complex<double> (((double)__Pyx_CREAL(__pyx_v_z)), ((double)__Pyx_CIMAG(__pyx_v_z)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 222, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "complex.from_py":220
 * 
 * @cname("__pyx_convert_complex_from_py_double")
 * cdef std_complex[X] __pyx_convert_complex_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef double complex z = o
 *     return std_complex[X](<X>z.real, <X>z.imag)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("complex.from_py.__pyx_convert_complex_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "complex.to_py":233
 * 
 * @cname("__pyx_convert_complex_to_py_double")
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):             # <<<<<<<<<<<<<<
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 */

static PyObject *__pyx_convert_complex_to_py_double(std::complex<double>  const &__pyx_v_z) {
  __pyx_t_double_complex __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_complex_to_py_double", 0);

  /* "complex.to_py":235
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()             # <<<<<<<<<<<<<<
 *     tmp.imag = <double>z.imag()
 *     return tmp
 */
  __Pyx_SET_CREAL(__pyx_v_tmp, ((double)__pyx_v_z.real()));

  /* "complex.to_py":236
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 *     tmp.imag = <double>z.imag()             # <<<<<<<<<<<<<<
 *     return tmp
 */
  __Pyx_SET_CIMAG(__pyx_v_tmp, ((double)__pyx_v_z.imag()));

  /* "complex.to_py":237
 *     tmp.real = <double>z.real()
 *     tmp.imag = <double>z.imag()
 *     return tmp             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_PyComplex_FromComplex(__pyx_v_tmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "complex.to_py":233
 * 
 * @cname("__pyx_convert_complex_to_py_double")
 * cdef object __pyx_convert_complex_to_py_double(const std_complex[X]& z):             # <<<<<<<<<<<<<<
 *     cdef double complex tmp
 *     tmp.real = <double>z.real()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("complex.to_py.__pyx_convert_complex_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_11libcalculus_ComplexFunction(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11libcalculus_ComplexFunction *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11libcalculus_ComplexFunction *)o);
  new((void*)&(p->cfunction)) libcalculus::CFunction<std::complex<double> ,std::complex<double> > ();
  if (unlikely(__pyx_pw_11libcalculus_15ComplexFunction_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11libcalculus_ComplexFunction(PyObject *o) {
  struct __pyx_obj_11libcalculus_ComplexFunction *p = (struct __pyx_obj_11libcalculus_ComplexFunction *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->cfunction);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11libcalculus_ComplexFunction[] = {
  {"latex", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_5latex, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_7_add, METH_O, 0},
  {"_sub", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_9_sub, METH_O, 0},
  {"_mul", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_11_mul, METH_O, 0},
  {"_div", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_13_div, METH_O, 0},
  {"_pow", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_15_pow, METH_O, 0},
  {"_compose", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_17_compose, METH_O, 0},
  {"_compose_contour", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_19_compose_contour, METH_O, 0},
  {"_addconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_21_addconst, METH_O, 0},
  {"_subconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_23_subconst, METH_O, 0},
  {"_lsubconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_25_lsubconst, METH_O, 0},
  {"_mulconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_27_mulconst, METH_O, 0},
  {"_divconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_29_divconst, METH_O, 0},
  {"_ldivconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_31_ldivconst, METH_O, 0},
  {"_powconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_33_powconst, METH_O, 0},
  {"_lpowconst", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_35_lpowconst, METH_O, 0},
  {"Identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_49Identity, METH_VARARGS|METH_KEYWORDS, 0},
  {"Exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_51Exp, METH_VARARGS|METH_KEYWORDS, 0},
  {"Sin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_53Sin, METH_VARARGS|METH_KEYWORDS, 0},
  {"Cos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_55Cos, METH_VARARGS|METH_KEYWORDS, 0},
  {"Tan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_57Tan, METH_VARARGS|METH_KEYWORDS, 0},
  {"Sec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_59Sec, METH_VARARGS|METH_KEYWORDS, 0},
  {"Csc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_61Csc, METH_VARARGS|METH_KEYWORDS, 0},
  {"Cot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_63Cot, METH_VARARGS|METH_KEYWORDS, 0},
  {"Pi", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_65Pi, METH_VARARGS|METH_KEYWORDS, 0},
  {"E", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_15ComplexFunction_67E, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_69__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11libcalculus_15ComplexFunction_71__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_ComplexFunction = {
  __pyx_pw_11libcalculus_15ComplexFunction_37__add__, /*nb_add*/
  __pyx_pw_11libcalculus_15ComplexFunction_39__sub__, /*nb_subtract*/
  __pyx_pw_11libcalculus_15ComplexFunction_41__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_pw_11libcalculus_15ComplexFunction_45__pow__, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_11libcalculus_15ComplexFunction_43__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_11libcalculus_15ComplexFunction_47__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_11libcalculus_ComplexFunction = {
  PyVarObject_HEAD_INIT(0, 0)
  "libcalculus.ComplexFunction", /*tp_name*/
  sizeof(struct __pyx_obj_11libcalculus_ComplexFunction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11libcalculus_ComplexFunction, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_ComplexFunction, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_11libcalculus_15ComplexFunction_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11libcalculus_ComplexFunction, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11libcalculus_ComplexFunction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_11libcalculus_Contour(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_11libcalculus_Contour *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_11libcalculus_Contour *)o);
  new((void*)&(p->cfunction)) libcalculus::CFunction<double,std::complex<double> > ();
  if (unlikely(__pyx_pw_11libcalculus_7Contour_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_11libcalculus_Contour(PyObject *o) {
  struct __pyx_obj_11libcalculus_Contour *p = (struct __pyx_obj_11libcalculus_Contour *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->cfunction);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_11libcalculus_Contour[] = {
  {"latex", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_5latex, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add", (PyCFunction)__pyx_pw_11libcalculus_7Contour_7_add, METH_O, 0},
  {"_sub", (PyCFunction)__pyx_pw_11libcalculus_7Contour_9_sub, METH_O, 0},
  {"_mul", (PyCFunction)__pyx_pw_11libcalculus_7Contour_11_mul, METH_O, 0},
  {"_div", (PyCFunction)__pyx_pw_11libcalculus_7Contour_13_div, METH_O, 0},
  {"_pow", (PyCFunction)__pyx_pw_11libcalculus_7Contour_15_pow, METH_O, 0},
  {"_addconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_17_addconst, METH_O, 0},
  {"_subconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_19_subconst, METH_O, 0},
  {"_lsubconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_21_lsubconst, METH_O, 0},
  {"_mulconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_23_mulconst, METH_O, 0},
  {"_divconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_25_divconst, METH_O, 0},
  {"_ldivconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_27_ldivconst, METH_O, 0},
  {"_powconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_29_powconst, METH_O, 0},
  {"_lpowconst", (PyCFunction)__pyx_pw_11libcalculus_7Contour_31_lpowconst, METH_O, 0},
  {"Identity", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_45Identity, METH_VARARGS|METH_KEYWORDS, 0},
  {"Exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_47Exp, METH_VARARGS|METH_KEYWORDS, 0},
  {"Sin", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_49Sin, METH_VARARGS|METH_KEYWORDS, 0},
  {"Cos", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_51Cos, METH_VARARGS|METH_KEYWORDS, 0},
  {"Tan", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_53Tan, METH_VARARGS|METH_KEYWORDS, 0},
  {"Sec", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_55Sec, METH_VARARGS|METH_KEYWORDS, 0},
  {"Csc", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_57Csc, METH_VARARGS|METH_KEYWORDS, 0},
  {"Cot", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_59Cot, METH_VARARGS|METH_KEYWORDS, 0},
  {"Pi", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_61Pi, METH_VARARGS|METH_KEYWORDS, 0},
  {"E", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_11libcalculus_7Contour_63E, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_11libcalculus_7Contour_65__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_11libcalculus_7Contour_67__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Contour = {
  __pyx_pw_11libcalculus_7Contour_33__add__, /*nb_add*/
  __pyx_pw_11libcalculus_7Contour_35__sub__, /*nb_subtract*/
  __pyx_pw_11libcalculus_7Contour_37__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  __pyx_pw_11libcalculus_7Contour_41__pow__, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  __pyx_pw_11libcalculus_7Contour_39__truediv__, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  __pyx_pw_11libcalculus_7Contour_43__matmul__, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_11libcalculus_Contour = {
  PyVarObject_HEAD_INIT(0, 0)
  "libcalculus.Contour", /*tp_name*/
  sizeof(struct __pyx_obj_11libcalculus_Contour), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_11libcalculus_Contour, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Contour, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  __pyx_pw_11libcalculus_7Contour_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_11libcalculus_Contour, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_11libcalculus_Contour, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_libcalculus(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_libcalculus},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "libcalculus",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ComplexFunction, __pyx_k_ComplexFunction, sizeof(__pyx_k_ComplexFunction), 0, 0, 1, 1},
  {&__pyx_n_s_Contour, __pyx_k_Contour, sizeof(__pyx_k_Contour), 0, 0, 1, 1},
  {&__pyx_n_s_Cos, __pyx_k_Cos, sizeof(__pyx_k_Cos), 0, 0, 1, 1},
  {&__pyx_n_s_Cot, __pyx_k_Cot, sizeof(__pyx_k_Cot), 0, 0, 1, 1},
  {&__pyx_n_s_Csc, __pyx_k_Csc, sizeof(__pyx_k_Csc), 0, 0, 1, 1},
  {&__pyx_n_s_E, __pyx_k_E, sizeof(__pyx_k_E), 0, 0, 1, 1},
  {&__pyx_n_s_Exp, __pyx_k_Exp, sizeof(__pyx_k_Exp), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_n_s_Identity, __pyx_k_Identity, sizeof(__pyx_k_Identity), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_Pi, __pyx_k_Pi, sizeof(__pyx_k_Pi), 0, 0, 1, 1},
  {&__pyx_kp_s_PyCFunction_pyx, __pyx_k_PyCFunction_pyx, sizeof(__pyx_k_PyCFunction_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_Sec, __pyx_k_Sec, sizeof(__pyx_k_Sec), 0, 0, 1, 1},
  {&__pyx_n_s_Sin, __pyx_k_Sin, sizeof(__pyx_k_Sin), 0, 0, 1, 1},
  {&__pyx_n_s_Tan, __pyx_k_Tan, sizeof(__pyx_k_Tan), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_addconst, __pyx_k_addconst, sizeof(__pyx_k_addconst), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_compose, __pyx_k_compose, sizeof(__pyx_k_compose), 0, 0, 1, 1},
  {&__pyx_n_s_compose_contour, __pyx_k_compose_contour, sizeof(__pyx_k_compose_contour), 0, 0, 1, 1},
  {&__pyx_n_s_div, __pyx_k_div, sizeof(__pyx_k_div), 0, 0, 1, 1},
  {&__pyx_n_s_divconst, __pyx_k_divconst, sizeof(__pyx_k_divconst), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_ldivconst, __pyx_k_ldivconst, sizeof(__pyx_k_ldivconst), 0, 0, 1, 1},
  {&__pyx_n_s_libcalculus, __pyx_k_libcalculus, sizeof(__pyx_k_libcalculus), 0, 0, 1, 1},
  {&__pyx_n_s_lpowconst, __pyx_k_lpowconst, sizeof(__pyx_k_lpowconst), 0, 0, 1, 1},
  {&__pyx_n_s_lsubconst, __pyx_k_lsubconst, sizeof(__pyx_k_lsubconst), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mul, __pyx_k_mul, sizeof(__pyx_k_mul), 0, 0, 1, 1},
  {&__pyx_n_s_mulconst, __pyx_k_mulconst, sizeof(__pyx_k_mulconst), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_pow, __pyx_k_pow, sizeof(__pyx_k_pow), 0, 0, 1, 1},
  {&__pyx_n_s_powconst, __pyx_k_powconst, sizeof(__pyx_k_powconst), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_sub, __pyx_k_sub, sizeof(__pyx_k_sub), 0, 0, 1, 1},
  {&__pyx_n_s_subconst, __pyx_k_subconst, sizeof(__pyx_k_subconst), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_u_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_varname, __pyx_k_varname, sizeof(__pyx_k_varname), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_u_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 1, 0, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "PyCFunction.pyx":196
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return ComplexFunction()
 * 
 */
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Identity, 196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 196, __pyx_L1_error)

  /* "PyCFunction.pyx":200
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Exp, 200, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 200, __pyx_L1_error)

  /* "PyCFunction.pyx":206
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Sin, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "PyCFunction.pyx":212
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Cos, 212, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(0, 212, __pyx_L1_error)

  /* "PyCFunction.pyx":218
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Tan, 218, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 218, __pyx_L1_error)

  /* "PyCFunction.pyx":224
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Sec, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "PyCFunction.pyx":230
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Csc, 230, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 230, __pyx_L1_error)

  /* "PyCFunction.pyx":236
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Cot, 236, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "PyCFunction.pyx":242
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Pi, 242, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 242, __pyx_L1_error)

  /* "PyCFunction.pyx":248
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_E, 248, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 248, __pyx_L1_error)

  /* "PyCFunction.pyx":384
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return Contour()
 * 
 */
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Identity, 384, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 384, __pyx_L1_error)

  /* "PyCFunction.pyx":388
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Exp, 388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 388, __pyx_L1_error)

  /* "PyCFunction.pyx":394
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Sin, 394, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 394, __pyx_L1_error)

  /* "PyCFunction.pyx":400
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Cos, 400, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 400, __pyx_L1_error)

  /* "PyCFunction.pyx":406
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Tan, 406, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 406, __pyx_L1_error)

  /* "PyCFunction.pyx":412
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Sec, 412, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 412, __pyx_L1_error)

  /* "PyCFunction.pyx":418
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Csc, 418, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 418, __pyx_L1_error)

  /* "PyCFunction.pyx":424
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Cot, 424, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 424, __pyx_L1_error)

  /* "PyCFunction.pyx":430
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_Pi, 430, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 430, __pyx_L1_error)

  /* "PyCFunction.pyx":436
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_n_s_F); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__41, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_PyCFunction_pyx, __pyx_n_s_E, 436, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(2, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_11libcalculus_ComplexFunction) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11libcalculus_ComplexFunction.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11libcalculus_ComplexFunction.tp_dictoffset && __pyx_type_11libcalculus_ComplexFunction.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11libcalculus_ComplexFunction.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ComplexFunction, (PyObject *)&__pyx_type_11libcalculus_ComplexFunction) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11libcalculus_ComplexFunction) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __pyx_ptype_11libcalculus_ComplexFunction = &__pyx_type_11libcalculus_ComplexFunction;
  if (PyType_Ready(&__pyx_type_11libcalculus_Contour) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_11libcalculus_Contour.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_11libcalculus_Contour.tp_dictoffset && __pyx_type_11libcalculus_Contour.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_11libcalculus_Contour.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Contour, (PyObject *)&__pyx_type_11libcalculus_Contour) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_11libcalculus_Contour) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_ptype_11libcalculus_Contour = &__pyx_type_11libcalculus_Contour;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initlibcalculus(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initlibcalculus(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_libcalculus(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_libcalculus(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_libcalculus(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'libcalculus' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_libcalculus(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(2, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(2, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("libcalculus", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(2, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(2, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_libcalculus) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(2, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "libcalculus")) {
      if (unlikely(PyDict_SetItemString(modules, "libcalculus", __pyx_m) < 0)) __PYX_ERR(2, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(2, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  #endif

  /* "PyCFunction.pyx":196
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return ComplexFunction()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_49Identity, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Identity, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":195
 *       raise NotImplementedError
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Identity():
 *     return ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Identity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Identity, __pyx_t_2) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":200
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Exp()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_51Exp, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Exp, __pyx_t_2) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":199
 *     return ComplexFunction()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Exp():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Exp, __pyx_t_1) < 0) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":206
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sin()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_53Sin, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Sin, __pyx_t_1) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":205
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Sin():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Sin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Sin, __pyx_t_2) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":212
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cos()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_55Cos, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Cos, __pyx_t_2) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":211
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Cos():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Cos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Cos, __pyx_t_1) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":218
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Tan()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_57Tan, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Tan, __pyx_t_1) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":217
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Tan():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Tan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Tan, __pyx_t_2) < 0) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":224
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Sec()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_59Sec, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Sec, __pyx_t_2) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":223
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Sec():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Sec); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Sec, __pyx_t_1) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":230
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Csc()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_61Csc, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Csc, __pyx_t_1) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":229
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Csc():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Csc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Csc, __pyx_t_2) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":236
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Cot()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_63Cot, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Cot, __pyx_t_2) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":235
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Cot():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Cot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Cot, __pyx_t_1) < 0) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":242
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].Pi()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_65Pi, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Pi, __pyx_t_1) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":241
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Pi():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_Pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_Pi, __pyx_t_2) < 0) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":248
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = ComplexFunction()
 *     F.cfunction = CFunction[complex_t[double], complex_t[double]].E()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_15ComplexFunction_67E, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_E, __pyx_t_2) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":247
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def E():
 *     F = ComplexFunction()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_ComplexFunction, __pyx_n_s_E); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_ComplexFunction->tp_dict, __pyx_n_s_E, __pyx_t_1) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_ComplexFunction);

  /* "PyCFunction.pyx":384
 * 
 *   @staticmethod
 *   def Identity():             # <<<<<<<<<<<<<<
 *     return Contour()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_45Identity, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Identity, __pyx_t_1) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":383
 *     raise NotImplementedError
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Identity():
 *     return Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Identity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Identity, __pyx_t_2) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":388
 * 
 *   @staticmethod
 *   def Exp():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Exp()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_47Exp, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Exp, __pyx_t_2) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":387
 *     return Contour()
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Exp():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Exp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Exp, __pyx_t_1) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":394
 * 
 *   @staticmethod
 *   def Sin():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sin()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_49Sin, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Sin, __pyx_t_1) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":393
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Sin():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Sin); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Sin, __pyx_t_2) < 0) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":400
 * 
 *   @staticmethod
 *   def Cos():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cos()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_51Cos, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Cos, __pyx_t_2) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":399
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Cos():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Cos); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Cos, __pyx_t_1) < 0) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":406
 * 
 *   @staticmethod
 *   def Tan():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Tan()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_53Tan, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Tan, __pyx_t_1) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":405
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Tan():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Tan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Tan, __pyx_t_2) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":412
 * 
 *   @staticmethod
 *   def Sec():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Sec()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_55Sec, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Sec, __pyx_t_2) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":411
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Sec():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Sec); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Sec, __pyx_t_1) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":418
 * 
 *   @staticmethod
 *   def Csc():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Csc()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_57Csc, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Csc, __pyx_t_1) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":417
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Csc():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Csc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Csc, __pyx_t_2) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":424
 * 
 *   @staticmethod
 *   def Cot():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Cot()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_59Cot, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Cot, __pyx_t_2) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":423
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Cot():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Cot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Cot, __pyx_t_1) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":430
 * 
 *   @staticmethod
 *   def Pi():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].Pi()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_61Pi, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Pi, __pyx_t_1) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":429
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def Pi():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_Pi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_Pi, __pyx_t_2) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":436
 * 
 *   @staticmethod
 *   def E():             # <<<<<<<<<<<<<<
 *     F = Contour()
 *     F.cfunction = CFunction[double, complex_t[double]].E()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_11libcalculus_7Contour_63E, NULL, __pyx_n_s_libcalculus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_E, __pyx_t_2) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "PyCFunction.pyx":435
 *     return F
 * 
 *   @staticmethod             # <<<<<<<<<<<<<<
 *   def E():
 *     F = Contour()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_11libcalculus_Contour, __pyx_n_s_E); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_11libcalculus_Contour->tp_dict, __pyx_n_s_E, __pyx_t_1) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_11libcalculus_Contour);

  /* "libcalculus.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * include "PyCFunction.pyx"
 * include "PyCCalculus.pyx"
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init libcalculus", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init libcalculus");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* FromPy */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
